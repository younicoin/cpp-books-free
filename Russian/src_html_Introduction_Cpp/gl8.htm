<htm>
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Бьярн Страустрап. Введение в язык Си++, Потоки</title>
</head>

<body bgcolor="#FFF5EE" link="#FF0000" vlink="#A52A2A"
alink="#FF0000">
<div align="center"><center>

<table border="0" width="100%">
    <tr>
        <td>&nbsp;</td>
    </tr>
</table>
</center></div>

<hr noshade width="90%">

<h1 align="center">Глава 8 </h1>

<h2 align="center"><a name="gl8">Потоки </a></h2>

<p><a name="gl8">Язык C++ не обеспечивает
средств для ввода/вывода. Ему это и
не нужно; такие средства легко и
элегантно можно создать с помощью
самого языка. Описанная здесь
стандартная библиотека потокового
ввода/вывода обеспечивает гибкий и
эффективный с гарантией типа метод
обработки символьного ввода целых
чисел, чисел с плавающей точкой и
символьных строк, а также простую
модель ее расширения для обработки
типов, определяемых пользователем.
Ее пользовательский интерфейс
находится в . В этой главе
описывается сама библиотека,
некоторые способы ее применения и
методы, которые использовались при
ее реализации. </a></p>

<h2 align="center"><a name="gl8.1">8.1 Введение </a></h2>

<p><a name="gl8.1">Разработка и реализация
стандартных средств ввода/вывода
для языка программирования
зарекомендовала себя как заведомо
трудная работа. Традиционно
средства ввода/вывода
разрабатывались исключительно для
небольшого числа встроенных типов
данных. Однако в C++ программах
обычно используется много типов,
определенных пользователем, и
нужно обрабатывать ввод и вывод
также и значений этих типов.
Очевидно, средство ввода/вывода
должно быть простым, удобным,
надежным в употреблении,
эффективным и гибким, и ко всему
прочему полным. Ничье решение еще
не смогло угодить всем, поэтому у
пользователя должна быть
возможность задавать
альтернативные средства
ввода/вывода и расширять
стандартные средства ввода/вывода
применительно к требованиям
приложения. <br>
C++ разработан так, чтобы у
пользователя была возможность
определять новые типы столь же
эффективные и удобные, сколь и
встроенные типы. Поэтому
обоснованным является требование
того, что средства ввода/вывода для
C++ должны обеспечиваться в C++ с
применением только тех средств,
которые доступны каждому
программисту. Описываемые здесь
средства ввода/вывода представляют
собой попытку ответить на этот
вызов. <br>
Средства ввода/вывода связаны
исключительно с обработкой
преобразования типизированных
объектов в последовательности
символов и обратно. Есть и другие
схемы ввода/вывода, но эта является
основополагающей в системе UNIX, и
большая часть видов бинарного
ввода/вывода обрабатывается через
рассмотрение символа просто как
набор бит, при этом его
общепринятая связь с алфавитом
игнорируется. Тогда для
программиста ключевая проблема
заключается в задании соответствия
между типизированным объектом и
принципиально не типизированной
строкой. <br>
Обработка и встроенных и
определенных пользователем типов
однородным образом и с гарантией
типа достигается с помощью одного
перегруженного имени функции для
набора функций вывода. Например: </a></p>

<pre><a name="gl8.1">
  put(cerr,&quot;x = &quot;); // cerr - поток вывода ошибок
  put(cerr,x);
  put(cerr,&quot;\n&quot;);
</a></pre>

<p><a name="gl8.1"><br>
Тип параметра определяет то, какая
из функций put будет вызываться для
каждого параметра. Это решение
применялось в нескольких языках.
Однако ему недостает лаконичности.
Перегрузка операции << значением "поместить в" дает более хорошую запись и позволяет программисту выводить ряд объектов одним оператором. Например: <pre> cerr << "x=" &lt;&lt; x &lt;&lt; " \n"; </pre> <br>
где cerr - стандартный поток вывода
ошибок. Поэтому, если x является int
со значением 123, то этот оператор
напечатает в стандартный поток
вывода ошибок </a></p>

<pre><a name="gl8.1">
  x = 123
</a></pre>

<p><a name="gl8.1"><br>
и символ новой строки. Аналогично,
если X принадлежит определенному
пользователем типу complex и имеет
значение (1,2.4), то приведенный выше
оператор напечатает в cerr </a></p>

<pre><a name="gl8.1">
  x = 1,2.4)
</a></pre>

<p><a name="gl8.1"><br>
Этот метод можно применять всегда,
когда для x определена операция <<, и пользователь может определять операцию << для нового типа. <a name="gl8.2"> </a></p>

<h2 align="center"><a name="gl8.1">8.2 Вывод </a></h2>

<table border="0">
    <tr>
        <td width="10"><a name="gl8.1"></a>&nbsp;</td>
        <td><a href="#gl8.2.1">8.2.1 Вывод
        Встроенных Типов </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.2.2">8.2.2 Некоторые
        Подробности Разработки </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.2.3">8.2.3
        Форматированный Вывод </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.2.4">8.2.4 Виртуальная
        Функция Вывода </a></td>
    </tr>
</table>

<p>В этом разделе сначала
обсуждаются средства форматного и
бесформатного вывода встроенных
типов, потом приводится
стандартный способ спецификации
действий вывода для определяемых
пользователем типов. </p>

<h3 align="center"><a name="gl8.2.1">8.2.1 Вывод
Встроенных Типов </a></h3>

<p><a name="gl8.2.1">Класс ostream определяется
вместе с операцией << ("поместить в") для обработки вывода встроенных типов: <pre> class ostream { // ...
public: ostream&amp; operator<<(char*); ostream& operator<<(int i) { return *this< </pre> </a></p>

<h3 align="center"><a name="gl8.2.2">8.2.2 Некоторые
Подробности Разработки </a></h3>

<p><a name="gl8.2.2">Операция вывода
используется, чтобы избежать той
многословности, которую дало бы
использование функции вывода. Но
почему <<? <br> Возможности изобрести
новый лексический символ нет (#6.2).
Операция присваивания была
кандидатом одновременно и на ввод,
и на вывод, но оказывается,
большинство людей предпочитают,
чтобы операция ввода отличалась от
операции вывода. Кроме того, = не в
ту сторону связывается
(ассоциируется), то есть cout=a=b
означает cout=(a=b). <br>
Делались попытки использовать
операции <и>, но значения &quot;меньше&quot;
и &quot;больше&quot; настолько прочно
вросли в сознание людей, что новые
операции ввода/вывода во всех
реальных случаях оказались
нечитаемыми. Помимо этого, &quot;<" находится на большинстве клавиатур как раз на ",", и у людей получаются операторы вроде такого: <pre> cout <x , y , z; </pre> <br>
Для таких операторов непросто
выдать хорошие сообщения об
ошибках. <br>
Операции << и>&gt; к такого рода проблемам
не приводят, они асимметричны в том
смысле, что их можно
проассоциировать с &quot;в&quot; и
&quot;из&quot;, а приоритет << достаточно низок, чтобы можно было не использовать скобки для арифметических выражений в роли операндов. Например: <pre> cout << "a*b+c=" &lt;&lt; a*b+c &lt;&lt; " \n"; </pre> <br>
Естественно, при написании
выражений, которые содержат
операции с более низкими
приоритетами, скобки использовать
надо. Например: </a></p>

<pre><a name="gl8.2.2">
  cout << "a^b|c=" &lt;&lt; (a^b|c) &lt;&lt; " \n"; </pre>

Операцию левого сдвига тоже можно применять в операторе вывода:
</a></pre>

<pre><a name="gl8.2.2">
  cout << "a< </pre>
</a><a name="gl8.2.3">
</a></pre>

<h3 align="center"><a name="gl8.2.3">8.2.3
Форматированный Вывод </a></h3>

<p><a name="gl8.2.3">Пока << применялась только для неформатированного вывода, и на самом деле в реальных программах она именно для этого главным образом и применяется. Помимо этого существует также несколько форматирующих функций, создающих представление своего параметра в виде строки, которая используется для вывода. Их второй (необязательный) параметр указывает, сколько символьных позиций должно использоваться. <pre> char* oct(long, int =0); //
восьмеричное представление char*
dec(long, int =0); // десятичное
представление char* hex(long, int =0); //
шестнадцатиричное представление
char* chr(int, int =0); // символ char* str(char*, int =0);
// строка <br>
Если не задано поле нулевой длины,
то будет производиться усечение
или дополнение; иначе будет
использоваться столько символов
(ровно), сколько нужно. Например: </a></p>

<pre><a name="gl8.2.3">
  cout << "dec(" << x << ")="oct(&quot;" << oct(x,6) << ")="hex(&quot;" << hex(x,4) << ")"; </pre>

Если x==15, то в результате получится:
</a></pre>

<pre><a name="gl8.2.3">
  dec(15) = oct(    17) = hex(   f);
</a></pre>

<pre><a name="gl8.2.3">
  Можно также использовать строку в общем формате:
</a></pre>

<pre><a name="gl8.2.3">
  char* form(char* format ...);
  cout<</pre>
</a><a name="gl8.2.4">
</a></pre>

<h3 align="center"><a name="gl8.2.4">8.2.4 Виртуальная
Функция Вывода </a></h3>

<p><a name="gl8.2.4">Иногда функция вывода
должна быть virtual. Рассмотрим пример
класса shape, который дает понятие
фигуры (</a><a href="gl1.htm#gl1.18">#1.18</a>): </p>

<pre>
  class shape {
      // ...
  public:
      // ...
      virtual void draw(ostream&amp; s); // рисует &quot;this&quot; на &quot;s&quot;
  };

  class circle : public shape {
      int radius;
  public:
      // ...
      void draw(ostream&amp;);
  };
</pre>

<pre>
  То есть,  круг имеет  все признаки  фигуры и может обрабатываться
как фигура,  но  имеет  также  и  некоторые  специальные  свойства,
которые должны учитываться при его обработке.

  Чтобы  поддерживать   для  таких  классов  стандартную  парадигму
вывода, операция << определяется так: <pre>
  ostream&amp; operator<<(ostream& s, shape* p) { p->draw(s);
      return s;
  }
</pre>

<pre>
 Если next  - итератор  типа определенного в <a
href="gl7.htm#gl7.3.3">#7.3.3</a>, то список фигур распечатывается например так:
</pre>

<pre>
  while ( p = next() ) cout << p; </pre>
<a name="gl8.3">
</a></pre>

<h2 align="center"><a name="gl8.3">8.3 Файлы и Потоки
</a></h2>

<table border="0">
    <tr>
        <td width="10"><a name="gl8.3"></a>&nbsp;</td>
        <td><a href="#gl8.3.1">8.3.1 Инициализация
        Потоков Вывода </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.3.2">8.3.2 Закрытие
        Потоков Вывода </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.3.3">8.3.3 Открытие
        Файлов </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.3.4">8.3.4 Копирование
        Потоков </a></td>
    </tr>
</table>

<p>Потоки обычно связаны с файлами.
Библиотека потоков создает
стандартный поток ввода cin,
стандартный поток вывода cout и
стандартный поток ошибок cerr.
Программист может открывать другие
файлы и создавать для них потоки. </p>

<h3 align="center"><a name="gl8.3.1">8.3.1
Инициализация Потоков Вывода </a></h3>

<p><a name="gl8.3.1">ostream имеет конструкторы:
</a></p>

<pre><a name="gl8.3.1">
  class ostream {
      // ...
      ostream(streambuf* s);      // связывает с буфером потока
      ostream(int fd);            // связывание для файла
      ostream(int size, char* p); // связывет с вектором
  };
</a></pre>

<pre><a name="gl8.3.1">
Главная работа  этих конструкторов  - связывать  с  потоком  буфер.
streambuf - класс, управляющий буферами; он описывается в </a><a
href="#gl8.6">#8.6</a>, как и класс  filebuf, управляющий  streambuf для  файла.  Класс filebuf
является производным от класса streambuf.

  Описание  стандартных   потоков  вывода   cout  и  cerr,  которое
находится  в   исходных  кодах   библиотеки  потоков  ввода/вывода,
выглядит так:
</pre>

<pre>
      // описать подходящее пространство буфера
  char cout_buf[BUFSIZE]

      // сделать &quot;filebuf&quot; для управления этим пространством
      // связать его с UNIX'овским потоком вывода 1 (уже открытым)
  filebuf cout_file(1,cout_buf,BUFSIZE);

      // сделать ostream, обеспечивая пользовательский интерфейс
  ostream cout(&amp;cout_file);

  char cerr_buf[1];

      // длина 0, то есть, небуферизованный
      // UNIX'овский поток вывода 2 (уже открытый)
  filebuf cerr_file()2,cerr_buf,0;

  ostream cerr(&amp;cerr_file);
</pre>

<pre>
  Примеры двух  других конструкторов ostream можно найти в <a
href="#gl8.3.3">#8.3.3</a> и <a href="#gl8.5">#8.5</a>.
<a name="gl8.3.2">
</a></pre>

<h3 align="center"><a name="gl8.3.2">8.3.2 Закрытие
Потоков Вывода </a></h3>

<p><a name="gl8.3.2">Деструктор для ostream
сбрасывает буфер с помощью
открытого члена функции ostream::flush(): </a></p>

<pre><a name="gl8.3.2">
  ostream::~ostream()
  {
      flush();       // сброс
  }
</a></pre>

<pre><a name="gl8.3.2">
Сбросить буфер можно также и явно. Например:
</a></pre>

<pre><a name="gl8.3.2">
  cout.flush();
</a></pre>

<h3 align="center"><a name="gl8.3.3">8.3.3 Открытие
Файлов </a></h3>

<p><a name="gl8.3.3">Точные детали того, как
открываются и закрываются файлы,
различаются в разных операционных
системах и здесь подробно не
описываются. Поскольку после
включения становятся доступны cin,
cout и cerr, во многих (если не во всех)
программах не нужно держать код для
открытия файлов. Вот, однако,
программа, которая открывает два
файла, заданные как параметры
командной строки, и копирует первый
во второй: </a></p>

<pre><a name="gl8.3.3">
  #include

  void error(char* s, char* s2)
  {
      cerr << s << " " << s2 << "\n"; exit(1); } main(int argc, char* argv[]) { if (argc !="3)" error("неверное число параметров",""); filebuf f1; if (f1.open(argv[1],input)="=" 0) error("не могу открыть входной файл",argv[1]); istream from(&f1); filebuf f2; if (f2.open(argv[2],output)="=" 0) error("не могу создать выходной файл",argv[2]); ostream to(&f2); char ch; while (from.get(ch)) to.put(ch); if (!from.eof() !! to.bad()) error("случилось нечто странное",""); } </pre>

Последовательность действий при создании ostream для именованного
файла та  же, что используется для стандартных потоков: (1) сначала
создается буфер  (здесь это делается посредством описания filebuf);
(2)  затем   к  нему   подсоединяется  файл   (здесь  это  делается
посредством открытия  файла с  помощью функции filebuf::open()); и,
наконец, (3)  создается сам ostream с filebuf в качестве параметра.
Потоки ввода обрабатываются аналогично.

  Файл может открываться в одной из двух мод:
</a></pre>

<pre><a name="gl8.3.3">
  enum open_mode { input, output };
</a></pre>

<pre><a name="gl8.3.3">
Действие filebuf::open() возвращает 0, если не может открыть файл в
соответствие с  требованием.  Если  пользователь  пытается  открыть
файл, которого не существует для output, он будет создан.

  Перед завершением  программа проверяет,  находятся  ли  потоки  в
приемлемом  состоянии   (см. </a><a
href="#gl8.4.2"> #8.4.2</a>).   При  завершении  программы открытые файлы неявно закрываются.

  Файл можно  также открыть  одновременно для чтения и записи, но в
тех случаях,  когда это  оказывается необходимо,  парадигма потоков
редко оказывается  идеальной. Часто  лучше рассматривать такой файл
как вектор  (гигантских размеров).  Можно определить  тип,  который
позволяет программе обрабатывать файл как вектор; см. <a
href="#y8">Упражнения 8-
10</a>.
<a name="gl8.3.4">
</a></pre>

<h3 align="center"><a name="gl8.3.4">8.3.4 Копирование
Потоков </a></h3>

<p><a name="gl8.3.4">Есть возможность
копировать потоки. Например: </a></p>

<pre><a name="gl8.3.4">
  cout = cerr;
</a></pre>

<pre><a name="gl8.3.4">
В результате этого получаются две переменные, ссылающиеся на один и
тот же  поток. Главным  образом это  бывает полезно  для того, чтобы
сделать стандартное  имя вроде  cin ссылающимся  на  что-то  другое
(пример этого см. в </a><a href="gl3.htm#gl3.1.6">#3.1.6</a>)
<a name="gl8.4">
</a></pre>

<h2 align="center"><a name="gl8.4">8.4 Ввод </a></h2>

<table border="0">
    <tr>
        <td width="10"><a name="gl8.4"></a>&nbsp;</td>
        <td><a href="#gl8.4.1">8.4.1 Ввод
        Встроенных Типов </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.4.2">8.4.2 Состояния
        Потока </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.4.3">8.4.3 Ввод Типов,
        Определяемых Пользователем </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl8.4.4">8.4.4 Инициализация
        Потоков Ввода </a></td>
    </tr>
</table>

<p>Ввод аналогичен выводу. Имеется
класс istream, который предоставляет
операцию &gt;&gt; (&quot;взять из&quot;) для
небольшого множества стандартных
типов. Функция operator&gt;&gt; может
определяться для типа,
определяемого пользователем. </p>

<h3 align="center"><a name="gl8.4.1">8.4.1 Ввод
Встроенных Типов </a></h3>

<p><a name="gl8.4.1">Класс istream определяется
так: </a></p>

<pre><a name="gl8.4.1">
class istream {
      // ...
  public:
      istream&amp; operator&gt;&gt;(char*);      // строка
      istream&amp; operator&gt;&gt;(char&amp;);      // символ
      istream&amp; operator&gt;&gt;(short&amp;);
      istream&amp; operator&gt;&gt;(int&amp;);
      istream&amp; operator&gt;&gt;(long&amp;);
      istream&amp; operator&gt;&gt;(float&amp;);
      istream&amp; operator&gt;&gt;(double&amp;);
      // ...
  };
</a></pre>

<pre><a name="gl8.4.1">
  Функции ввода определяются в таком духе:
</a></pre>

<pre><a name="gl8.4.1">
  istream&amp; istream::operator&gt;&gt;(char&amp; c);
  {
          // пропускает пропуски
      int a;
          // неким образом читает символ в &quot;a&quot;
      c = a;
  }
</a></pre>

<pre><a name="gl8.4.1">
  Пропуск определяется  как стандартный  пропуск в  C, через  вызов
isspase() в  том виде,  как она  определена  в    (пробел,
табуляция, символ новой строки, перевод формата и возврат каретки).

  В качестве альтернативы можно использовать функции get():
</a></pre>

<pre><a name="gl8.4.1">
  class istream {
      // ...
      istream&amp; get(char&amp; c);                    // char
      istream&amp; get(char* p, int n, int ='\n');  // строка
  };
</a></pre>

<pre><a name="gl8.4.1">
Они обрабатывают  символы пропуска  так же,  как остальные символы.
Функция istream::get(char)  читает один  и тот  же  символ  в  свой
параметр; другая  istream::get читает  не более n символов в вектор
символов,  начинающийся   в  p.   Необязательный  третий   параметр
используется для  задания символа остановки (иначе, терминатора или
ограничителя), то  есть этот  символ читаться  не будет. Если будет
встречен  символ  ограничитель,  он  останется  как  первый  символ
потока. По  умолчанию вторая функция get будет читать самое большее
n  символов,   но  не   больше  чем   одну  строку,  '\n'  является
ограничителем по  умолчанию. Необязательный  третий параметр задает
символ, который читаться не будет. Например:
</a></pre>

<pre><a name="gl8.4.1">
  cin.get(buf,256,'\t');
</a></pre>

<pre><a name="gl8.4.1">
будет читать  в buf  не  более  256  символов,  а  если  встретится
табуляция ('\t'),  то это приведет к возврату из get. В этом случае
следующим символом, который будет считан из cin, будет '\t'.

  Стандартный  заголовочный  файл    определяет  несколько
функций, которые могут оказаться полезными при осуществлении ввода:
</a></pre>

<pre><a name="gl8.4.1">
  int isalpha(char)    // 'a'..'z' 'A'..'Z'
  int isupper(char)    // 'A'..'Z'
  int islower(char)    // 'a'..'z'
  int isdigit(char)    // '0'..'9'
  int isxdigit(char)   // '0'..'9' 'a'..'f' 'A'..'F'
  int isspase(char)    // ' ' '\t' возврат новая строка
                       // перевод формата
  int iscntrl(char)    // управляющий символ
                       // (ASCII 0..31 и 127)
  int ispunct(char)    // пунктуация: ниодин из вышеперечисленных
  int isalnum(char)    // isalpha() | isdigit()
  int isprint(char)    // печатаемый: ascii ' '..'-'
  int isgraph(char)    // isalpha() | isdigit() | ispunct()
  int isascii(char c)  { return 0<=c &&c<="127;" } </pre>

Все кроме  isascii() реализуются  внешне одинаково,  с  применением
символа в  качестве индекса  в таблице  атрибутов символов. Поэтому
такие выражения, как
</a></pre>

<pre><a name="gl8.4.1">
  (('a'<=c && c<="z" ) || ('A'<="c" && c<="Z" )) // алфавитный </pre>

не только  утомительно пишутся  и чреваты  ошибками  (на  машине  с
набором символов  EBCDIC оно будет принимать неалфавитные символы),
они также и менее эффективны, чем применение стандартной функции:
</a></pre>

<pre><a name="gl8.4.1">
  isalpha(c)
</a></pre>

<h3 align="center"><a name="gl8.4.2">8.4.2 Состояния
Потока </a></h3>

<p><a name="gl8.4.2">Каждый поток (istream или
ostream) имеет ассоциированное с ним
состояние, и обработка ошибок и
нестандартных условий
осуществляется с помощью
соответствующей установки и
проверки этого состояния. <br>
Поток может находиться в одном из
следующих состояний: </a></p>

<pre><a name="gl8.4.2">
  enum stream_state { _good, _eof, _fail, _bad };
</a></pre>

<pre><a name="gl8.4.2">
Если состояние  _good или  _eof, значит  последняя  операция  ввода
прошла успешно.  Если состояние  _good, то следующая операция ввода
может пройти  успешно, в  противном случае она закончится неудачей.
Другими словами,  применение операции  ввода к  потоку, который  не
находится  в  состоянии  _good,  является  пустой  операцией.  Если
делается попытка  читать в  переменную v,  и  операция  оканчивается
неудачей,  значение   v  должно   остаться  неизменным  (оно  будет
неизменным, если  v имеет один из тех типов, которые обрабатываются
функциями членами  istream или  ostream). Отличия между состояниями
_fail и  _bad очень  незначительно и представляет интерес только для
разработчиков операций ввода. В состоянии _fail предполагается, что
поток не  испорчен и  никакие символы не потеряны. В состоянии _bad
может быть все что угодно.

  Состояние потока можно проверять например так:
</a></pre>

<pre><a name="gl8.4.2">
switch (cin.rdstate()) {
  case _good:
      // последняя операция над cin прошла успешно
      break;
  case _eof:
      // конец файла
      break;
  case _fail:
      // некоего рода ошибка форматирования
      // возможно, не слишком плохая
      break;
  case _bad:
      // возможно, символы cin потеряны
      break;
  }
</a></pre>

<pre><a name="gl8.4.2">
  Для любой  переменной z типа, для которого определены операции << и>&gt;, копирующий цикл можно написать так:
</a></pre>

<pre><a name="gl8.4.2">
  while (cin&gt;&gt;z) cout << z << "\n"; </pre>

Например,  если   z  -  вектор  символов,  этот  цикл  будет  брать
стандартный ввод и помещать его в стандартный вывод по одному слову
(то есть, последовательности символов без пробела) на строку.

  Когда в  качестве условия используется поток, происходит проверка
состояния потока    и  эта  проверка  проходит  успешно  (то  есть,
значение условия не ноль) только если состояние _good. В частности,
в  предыдущем   цикле  проверялось   состояние   istream,   которое
возвращает cin&gt;&gt;z.  Чтобы  обнаружить,  почему  цикл  или  проверка
закончились неудачно,  можно исследовать  состояние. Такая проверка
потока реализуется операцией преобразования (</a><a
href="gl6.htm#gl6.3.2">#6.3.2</a>).

  Делать проверку  на  наличие  ошибок  каждого  ввода  или  вывода
действительно не  очень удобно,  и обычно  источником ошибок служит
программист, не  сделавший этого  в том месте, где это существенно.
Например, операции  вывода обычно  не  проверяются,  но  они  могут
случайно не сработать. Парадигма потока ввода/вывода построена так,
чтобы когда в C++ появится (если это произойдет) механизм обработки
исключительных ситуаций  (как средство  языка или  как  стандартная
библиотека)   его   будет   легко   применить   для   упрощения   и
стандартизации обработки ошибок в потоках ввода/вывода.
<a name="gl8.4.3">
</a></pre>

<h3 align="center"><a name="gl8.4.3">8.4.3 Ввод Типов,
Определяемых Пользователем </a></h3>

<p><a name="gl8.4.3">Ввод для
пользовательского типа может
определяться точно так же, как
вывод, за тем исключением, что для
операции ввода важно, чтобы второй
параметр был ссылочного типа.
Например: </a></p>

<pre><a name="gl8.4.3">
  istream&amp; operator&gt;&gt;(istream&amp; s, complex&amp; a)
  /*
      форматы ввода для complex; &quot;f&quot; обозначает float:
      f
      ( f )
      ( f , f )
  */
  {
      double re = 0, im = 0;
      char c = 0;

      s &gt;&gt; c;
      if (c == '(') {
          s &gt;&gt; re &gt;&gt; c;
          if (c == ',') s &gt;&gt; im &gt;&gt; c;
          if (c != ')') s.clear(_bad);    // установить state
      }
      else {
          s.putback(c);
          s &gt;&gt; re;
      }

      if (s) a = complex(re,im);
      return s;
  }
</a></pre>

<pre><a name="gl8.4.3">
  Несмотря на  то, что  не хватает  кода обработки  ошибок, большую
часть видов  ошибок это на самом деле обрабатывать будет. Локальная
переменная c  инициализируется,  чтобы  ее  значение  не  оказалось
случайно  '('   после  того,   как  операция   окончится   неудачно.
Завершающая проверка  состояния потока  гарантирует,  что  значение
параметра a  будет изменяться  только в  том случае,  если все идет
хорошо.

  Операция установки  состояния названа  clear() (очистить), потому
что она  чаще всего  используется  для  установки  состояния  потока
заново как _good. _good является значением параметра по умолчанию и
для istream::clear(), и для ostream::clear().

  Над операциями  ввода надо  поработать еще. Было бы, в частности,
замечательно, если  бы можно  было задавать ввод в терминах шаблона
(как в  языках Снобол и Икон), а потом проверять, прошла ли успешна
вся  операция  ввода.  Такие  операции  должны  были  бы,  конечно,
обеспечивать некоторую  дополнительную буферизацию, чтобы они могли
восстанавливать поток ввода в его исходное состояние после неудачной
попытки распознавания.
</a><a name="gl8.4.4">
</a></pre>

<h3 align="center"><a name="gl8.4.4">8.4.4
Инициализация Потоков Ввода </a></h3>

<p><a name="gl8.4.4">Естественно, тип istream,
так же как и ostream, снабжен
конструктором: </a></p>

<pre><a name="gl8.4.4">
  class istream {
      // ...
      istream(streambuf* s, int sk =1, ostream* t =0);
      istream(int size, char* p, int sk =1);
      istream(int fd, int sk =1, ostream* t =0);
  };
</a></pre>

<pre><a name="gl8.4.4">
Параметр sk  задает, должны пропускаться пропуски или нет. Параметр
t  (необязательный)   задает  указатель   на  ostream,  к  которому
прикреплен istream.  Например, cin  прикреплен к  cout; это значит,
что перед  тем, как  попытаться читать символы из своего файла, cin
выполняет
</a></pre>

<pre><a name="gl8.4.4">
  cout.flush(); // пишет буфер вывода
</a></pre>

<pre><a name="gl8.4.4">
  С помощью функции istream::tie() можно прикрепить (или открепить,
с помощью tie(0)) любой ostream к любому istream. Например:
</a></pre>

<pre><a name="gl8.4.4">
  int y_or_n(ostream&amp; to, istream&amp; from)
  /*
       &quot;to&quot;, получает отклик из &quot;from&quot;
  */
  {
      ostream* old = from.tie(&amp;to);
      for (;;) {
          cout << "наберите Y или N: "; char ch="0;" if (!cin.get(ch)) return 0; if (ch !="\n" ) { // пропускает остаток строки char ch2="0;" while (cin.get(ch2) && ch2 !="\n" ) ; } switch (ch) { case 'Y': case 'y': case '\n': from.tie(old); // восстанавливает старый tie return 1; case 'N': case 'n': from.tie(old); // восстанавливает старый tie return 0; default: cout << "извините, попробуйте еще раз: "; } } } </pre>

Когда используется  буферизованный  ввод  (как  это  происходит  по
умолчанию), пользователь  не может набрав только одну букву ожидать
отклика. Система  ждет появления  символа  новой  строки.  y_or_n()
смотрит на первый символ строки, а остальные игнорирует.

  Символ   можно    вернуть   в    поток    с    помощью    функции
istream::putback(char).  Это   позволяет   программе   &quot;заглядывать
вперед&quot; в поток ввода.
</a><a name="gl8.5">
</a></pre>

<h2 align="center"><a name="gl8.5">8.5 Работа со
Строками </a></h2>

<p><a name="gl8.5">Можно осуществлять
действия, подобные вводу/выводу,
над символьным вектором,
прикрепляя к нему istream или ostream.
Например, если вектор содержит
обычную строку, завершающуюся
нулем, для печати слов из этого
вектора можно использовать
приведенный выше копирующий цикл: </a></p>

<pre><a name="gl8.5">
  void word_per_line(char v[], int sz)
  /*
      печатет &quot;v&quot; размера &quot;sz&quot; по одному слову на строке
  */
  {
      istream ist(sz,v); // сделать istream для v
      char b2[MAX];      // больше наибольшего слова
      while (ist&gt;&gt;b2) cout << b2 << "\n"; } </pre>

Завершающий нулевой  символ  в  этом  случае  интерпретируется  как
символ конца файла.
 
 В помощью  ostream можно  отформатировать сообщения,  которые  не
нужно печатать тотчас же:
</a></pre>

<pre><a name="gl8.5">
  char* p = new char[message_size];
  ostream ost(message_size,p);
  do_something(arguments,ost);
  display(p);
</a></pre>

<pre><a name="gl8.5">
  Такая операция,  как do_something,  может  писать  в  поток  ost,
передавать ost  своим  подоперациям  и  т.д.  с помощью  стандартных
операций вывода. Нет необходимости делать проверку не переполнение,
поскольку ost  знает свою  длину и когда он будет переполняться, он
будет переходить  в состояние  _fail.  И,  наконец,  display  может
писать сообщения  в &quot;настоящий&quot;  поток  вывода.  Этот  метод  может
оказаться наиболее  полезным, чтобы  справляться  с  ситуациями,  в
которых окончательное  отображение данных  включает  в  себя  нечто
более сложное,  чем работу  с традиционным  построчным  устройством
вывода. Например,  текст из ost мог бы помещаться в располагающуюся
где-то на экране область фиксированного размера.
</a><a name="gl8.6">
</a></pre>

<h2 align="center"><a name="gl8.6">8.6 Буферизация </a></h2>

<p><a name="gl8.6">При задании операций
ввода/вывода мы никак не касались
типов файлов, но ведь не все
устройства можно рассматривать
одинаково с точки зрения стратегии
буферизации. Например, для ostream,
подключенного к символьной строке,
требуется буферизация другого
вида, нежели для ostream, подключенного
к файлу. С этими проблемами можно
справиться, задавая различные
буферные типы для разных потоков в
момент инициализации (обратите
внимание на три конструктора
класса ostream). Есть только один набор
операций над этими буферными
типами, поэтому в функциях ostream нет
кода, их различающего. Однако
функции, которые обрабатывают
переполнение сверху и снизу,
виртуальные. Этого достаточно,
чтобы справляться с необходимой в
данное время стратегией
буферизации. Это также служит
хорошим примером применения
виртуальных функций для того, чтобы
сделать возможной однородную
обработку логически эквивалентных
средств с различной реализацией.
Описание буфера потока в выглядит
так: </a></p>

<pre><a name="gl8.6">
  struct streambuf {      // управление буфером потока

      char* base;         // начало буфера
      char* pptr;         // следующий свободный char
      char* qptr;         // следующий заполненный char
      char* eptr;         // один из концов буфера
      char  alloc;        // буфер, выделенный с помощью new

          // Опустошает буфер:
          // Возвращает EOF при ошибке и 0 в случае успеха
      virtual int overflow(int c =EOF);

          // Заполняет буфер
          // Возвращет EOF при ошибке или конце ввода,
          // иначе следующий char
      virtual int underflow();

      int snextc()        // берет следующий char
      {
          return (++qptr==pptr) ? underflow() : *qptr&amp;0377
      }

      // ...

      int allocate()      // выделяет некоторое пространство буфера

      streambuf() { /* ... */}
      streambuf(char* p, int l) { /* ... */}
      ~streambuf() { /* ... */}
  };
</a></pre>

<pre><a name="gl8.6">
  Обратите внимание,  что здесь определяются указатели, необходимые
для работы  с буфером,  поэтому обычные посимвольные действия можно
определить (только один раз) в виде максимально эффективных inline-
функций. Для  каждой конкретной  стратегии  буферизации  необходимо
определять только  функции переполнения  overflow() и  underflow().
Например:
</a></pre>

<pre><a name="gl8.6">
  struct filebuf : public streambuf {

      int fd;              // дескриптор файла
      char opened;         // файл открыт

      int overflow(int c =EOF);
      int underflow();

      // ...

          // Открывает файл:
          // если не срабатывает, то возвращает 0,
          // в случае успеха возвращает &quot;this&quot;
      filebuf* open(char *name, open_mode om);
      int close() { /* ... */ }

      filebuf() { opened = 0; }
      filebuf(int nfd) { /* ... */ }
      filebuf(int nfd, char* p, int l) : (p,l) { /* ... */ }
      ~filebuf() { close(); }
  };

  int filebuf::underflow()         // заполняет буфер из fd
  {
      if (!opened || allocate()==EOF) return EOF;

      int count = read(fd, base, eptr-base);
      if (count <1) return EOF; qptr="base;" pptr="base" + count; return *qptr & 0377; } </pre>
</a><a name="gl8.7">
</a></pre>

<h2 align="center"><a name="gl8.7">8.7 Эффективность
</a></h2>

<p><a name="gl8.7">Можно было бы ожидать,
что раз ввод/вывод определен с
помощью общедоступных средств
языка, он будет менее эффективен,
чем встроенное средство. На самом
деле это не так. Для действий вроде
&quot;поместить символ в поток&quot;
используются inline-функции,
единственные необходимые на этом
уровне вызовы функций возникают
из-за переполнения сверху и снизу.
Для простых объектов (целое, строка
и т.п.) требуется по одному вызову на
каждый. Как выясняется, это не
отличается от прочих средств
ввода/вывода, работающих с
объектами на этом уровне. </a></p>

<h2 align="center"><a name="gl8.8">8.8 Упражнения </a></h2>

<ol>
    <li><a name="gl8.8">(*1.5) Считайте файл
        чисел с плавающей точкой,
        составьте из пар считанных
        чисел комплексные числа и
        выведите комплексные числа. </a></li>
    <li><a name="gl8.8">(*1.5) Определите тип
        name_and_address (имя_и_адрес).
        Определите для него << и>&gt;.
        Скопируйте поток объектов
        name_and_address. </a></li>
    <li><a name="gl8.8">(*2) Постройте
        несколько функций для запроса
        и чтения различного вида
        информации. Простейший пример -
        функция y_or_n() в </a><a href="#gl8.4.4">#8.4.4.</a>
        Идеи: целое, число с плавающей
        точкой, имя файла, почтовый
        адрес, дата, личные данные и т.д.
        Постарайтесь сделать их
        защищенными от дурака. </li>
    <li>(*1.5) Напишите программу,
        которая печатает (1) все буквы в
        нижнем регистре, (2) все буквы, (3)
        все буквы и цифры, (4) все
        символы, которые могут
        встречаться в идентификаторах
        C++ на вашей системе, (5) все
        символы пунктуации, (6) целые
        значения всех управляющих
        символов, (7) все символы
        пропуска, (8) целые значения
        всех символов пропуска, и (9) все
        печатаемые символы. </li>
    <li>(*4) Реализуйте стандартную
        библиотеку ввода/вывода C () с
        помощью стандартной
        библиотеки ввода/вывода C++ (). </li>
    <li>(*4) Реализуйте стандартную
        библиотеку ввода/вывода C++ () с
        помощью стандартной
        библиотеки ввода/вывода C (). </li>
    <li>(*4) Реализуйте стандартные
        библиотеки C и C++ так, чтобы они
        могли использоваться
        одновременно. </li>
    <li><a name="y8">(*2) Реализуйте класс, для
        которого [] перегружено для
        реализации случайного чтения
        символов из файла. </a></li>
    <li><a name="y8">(*3) Как Упражнение 8,
        только сделайте, чтобы []
        работало и для чтения, и для
        записи. Подсказка: сделайте,
        чтобы [] возвращало объект
        &quot;дескрипторного типа&quot;, для
        которого присваивание
        означало бы присвоить файлу
        через дескриптор, а неявное
        преобразование в char означало
        бы чтение из файла через
        дескриптор. </a></li>
    <li><a name="y8">(*2) Как Упражнение 9,
        только разрешите []
        индексировать записи
        некоторого вида, а не символы. </a></li>
    <li><a name="y8">(*3) Сделайте обобщенный
        вариант класса, определенного
        в Упражнении 10. </a></li>
    <li><a name="y8">(*3.5) Разработайте и
        реализуйте операцию ввода по
        сопоставлению с образцом. Для
        спецификации образца
        используйте строки формата в
        духе printf. Должна быть
        возможность попробовать
        сопоставить со вводом
        несколько образцов для
        нахождения фактического
        формата. Можно было бы вывести
        класс ввода по образцу из istream. </a></li>
    <li><a name="y8">(*4) Придумайте (и
        реализуйте) вид образцов,
        которые намного лучше. </a></li>
</ol>

<p align="center"><a name="y8"><font size="2">[</font></a><a
href="gl7.htm"><font size="2">Назад</font></a><font size="2">]
[</font><a href="aglav.htm"><font size="2">Содержание</font></a><font
size="2">] [</font><a href="ref1_7.htm"><font size="2">Вперед</font></a><font
size="2">] </font></p>

<p align="center">&nbsp;</p>
</body>
</html>
