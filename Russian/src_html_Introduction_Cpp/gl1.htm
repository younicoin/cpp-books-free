<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Бьярн Страустрап. Введение в язык Си++,Турне по С++</title>
</head>

<body bgcolor="#FFF5EE" link="#FF0000" vlink="#A52A2A"
alink="#FF0000">
<div align="center"><center>

<table border="0" width="100%">
    <tr>
        <td>&nbsp;</td>
    </tr>
</table>
</center></div>

<hr noshade width="90%">

<h1 align="center">Глава 1 </h1>

<h2 align="center">Турне по C++ </h2>

<p align="center">Единственный способ
изучать новый язык
программирования - писать на нем
программы. <br>
- Брайэн Керниган </p>

<p>Эта глава представляет собой
краткий обзор основных черт языка
программирования C++. Сначала
приводится программа на C++, затем
показано, как ее откомпилировать и
запустить, и как такая программа
может выводить выходные данные и
считывать входные. В первой трети
этой главы после введения описаны
наиболее обычные черты C++: основные
типы, описания, выражения,
операторы, функции и структура
программы. Оставшаяся часть главы
посвящена возможностям C++ по
определению новых типов, скрытию
данных, операциям, определяемым
пользователем, и иерархии
определяемых пользователем типов. </p>

<h2 align="center"><a name="gl1.1">1.1 Введение</a></h2>

<table border="0">
    <tr>
        <td width="10"><a name="gl1.1"></a>&nbsp;</td>
        <td><a href="#gl1.1.1">1.1.1 Вывод </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.1.2">1.1.2 Компиляция </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.1.3">1.1.3 Ввод </a></td>
    </tr>
</table>

<p>Это турне проведет вас через ряд
программ и частей программ на C++. К
концу у вас должно сложиться общее
представление об основных
особенностях C++, и будет достаточно
информации, чтобы писать простые
программы. Для точного и полного
объяснения понятий, затронутых
даже в самом маленьком законченном
примере, потребовалось бы
несколько страниц определений.
Чтобы не превращать эту главу в
описание или в обсуждение общих
понятий, примеры снабжены только
самыми короткими определениями
используемых терминов. Термины
рассматриваются позже, когда будет
больше примеров, способствующих
обсуждению. </p>

<h3 align="center"><a name="gl1.1.1">1.1.1 Вывод </a></h3>

<p><a name="gl1.1.1">Прежде всего, давайте
напишем программу, выводящую
строку выдачи: </a></p>

<pre><a name="gl1.1.1">
  #include

  main()
  {
      cout << "Hello, world\n"; } </pre>

  Строка #include  сообщает компилятору, чтобы он включил
стандартные возможности  потока ввода и вывода, находящиеся в файле
stream.h. Без  этих описаний  выражение cout << "Hello, world\n" не имело бы смысла. Операция << ("поместить в"<a HREF="#*1.1">*<sup>1</sup></a>) пишет  свой первый аргумент во  второй (в  данном случае,  строку &quot;Hello,  world\n&quot;  в
стандартный поток  вывода cout).  Строка -  это  последовательность
символов, заключенная  в двойные  кавычки. В строке символ обратной
косой  \,   за  которым  следует  другой  символ,  обозначает  один
специальный символ;  в данном  случае, \n  является символом  новой
строки. Таким  образом выводимые  символы состоят из Hello, world и
перевода строки.

  Остальная часть программы
</pre>

<pre>
  main() { ... }
</pre>

<pre>
определяет  функцию,   названную  main.   Каждая  программа  должна
содержать функцию  с именем  main, и  работа программы начинается с
выполнения этой функции.
<a name="gl1.1.2">
</a></pre>

<h3 align="center"><a name="gl1.1.2">1.1.2 Компиляция</a></h3>

<p><a name="gl1.1.2">Откуда появились
выходной поток cout и код,
реализующий операцию вывода <<? Для получения выполняемого кода написанная на C++ программа должна быть скомпилирована; по своей сути процесс компиляции такой же, как и для С, и в нем участвует большая часть входящих в последний программ. Производится чтение и анализ текста программы, и если не обнаружены ошибки, то генерируется код. Затем программа проверяется на наличие имен и операций, которые использовались, но не были определены (в нашем случае это cout и <<). Если это возможно, то программа делается полной посредством дополнения недостающих определений из библиотеки (есть стандартные библиотеки, и пользователи могут создавать свои собственные). В нашем случае cout и << были описаны в stream.h, то есть, были указаны их типы, но не было дано никаких подробностей относительно их реализации. В стандартной библиотеке содержится спецификация пространства и инициализирующий код для cout и <<. На самом деле, в этой библиотеке содержится и много других вещей, часть из которых описана в stream.h, однако к скомпилированной версии добавляется только подмножество библиотеки, необходимое для того, чтобы сделать нашу программу полной. <br>
Команда компиляции в C++ обычно
называется CC. Она используется так
же, как команда cc для программ на C;
подробности вы можете найти в вашем
руководстве. Предположим, что
программа с &quot;Hello, world&quot; хранится
в файле с именем hello.c, тогда вы
можете ее скомпилировать и
запустить примерно так ($ -
системное приглашение): </a></p>

<pre><a name="gl1.1.2">
  $ CC hello.c
  $ a.out
  Hello,world
  $
</a></pre>

<pre><a name="gl1.1.2">
a.out -  это принимаемое  по умолчанию  имя исполняемого результата
компиляции. Если  вы  хотите  назвать  свою  программу,  вы  можете
сделать это с помощью опции -o:
</a></pre>

<pre><a name="gl1.1.2">
  $ CC hello.c -o hello
  $ hello
  Hello,world
  $
</a></pre>

<h3 align="center"><a name="gl1.1.3">1.1.3 Ввод</a></h3>

<p><a name="gl1.1.3">Следующая (довольно
многословная) программа предлагает
вам ввести число дюймов. После того,
как вы это сделаете, она напечатает
соответствующее число сантиметров.
</a></p>

<pre><a name="gl1.1.3">
  #include

  main()
  {
      int inch = 0;         // inch - дюйм
      cout << "inches"; cin>&gt; inch;
      cout << inch; cout << " in=";
      cout &lt;&lt; inch*2.54;
      cout &lt;&lt; " cm\n"; } </pre>

Первая строка  функции main()  описывает целую  переменную inch. Ее
значение  считывается  с  помощью  операции  &gt;&gt;  (&quot;взять  из&quot;)  над
стандартным потоком  ввода cin.  Описания cin  и  &gt;&gt;,  конечно  же,
находятся  в  .  После  ее  запуска  ваш  терминал  может
выглядеть примерно так:
</a></pre>

<pre><a name="gl1.1.3">
  $ a.out
  inches=12
  12 in = 30.48 cm
  $
</a></pre>

<pre><a name="gl1.1.3">
 В этом  примере на  каждую команду вывода приходится один оператор;
это слишком  длинно.  Операцию  вывода  << можно применять к ее собственному результату, так что последние четыре команды вывода можно было записать одним оператором: <pre>
  cout << inch << " in=" &lt;&lt; inch*2.54 &lt;&lt; " cm\n"; </pre>

В последующих  разделах ввод  и вывод будут описаны гораздо более
подробно.  Вся  эта  глава  фактически  может  рассматриваться  как
объяснение того,  как можно написать предыдущие программы на языке,
который не  обеспечивает  операции  ввода-вывода.  На  самом  деле,
приведенные  выше   программы  написаны   на   C++,   &quot;расширенном&quot;
операциями  ввода-вывода   посредством  использования  библиотек  и
включения файлов  с помощью  #include. Другими  словами, язык C++ в
том  виде,  в  котором  он  описан  в  справочном  руководстве,  не
определяет  средств  ввода-вывода;  вместо  этого  исключительно  с
помощью средств, доступных любому программисту, определены операции
<< и>&gt;.
</a><a name="gl1.2">
</a></pre>

<h2 align="center"><a name="gl1.2">1.2 Комментарии</a></h2>

<p><a name="gl1.2">Часто бывает полезно
вставлять в программу текст,
который предназначается в качестве
комментария только для читающего
программу человека и игнорируется
компилятором в программе. В C++ это
можно сделать одним из двух
способов. <br>
Символы /* начинают комментарий,
заканчивающийся символами */. Вся
эта последовательность символов
эквивалентна символу пропуска
(например, символу пробела). Это
наиболее полезно для многострочных
комментариев и изъятия частей
программы при редактировании,
однако следует помнить, что
комментарии /* */ не могут быть
вложенными. <br>
Символы // начинают комментарий,
который заканчивается в конце
строки, на которой они появились.
Опять, вся последовательность
символов эквивалентна пропуску.
Этот способ наиболее полезен для
коротких комментариев. Символы //
можно использовать для того, чтобы
закомментировать символы /* или */, а
символами /* можно закомментировать
//. </a></p>

<h2 align="center"><a name="gl1.3">1.3 Типы и
Описания</a></h2>

<table border="0">
    <tr>
        <td width="10"><a name="gl1.3"></a>&nbsp;</td>
        <td><a href="#gl1.3.1">1.3.1 Основные Tипы </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.3.2">1.3.2 Производные
        Типы </a></td>
    </tr>
</table>

<p>Каждое имя и каждое выражение
имеет тип, определяющий операции,
которые могут над ними
производиться. Например, описание </p>

<pre>
  int inch;
</pre>

<pre>
определяет, что  inch имеет  тип int, то есть,  inch является целой
переменной.

  Описание - это оператор, который вводит имя в программе. Описание
задает тип  этого имени.  Тип определяет   правильное использование
имени или выражения. Для целых определены такие операции, как +, -,
* и /. После того, как включен файл stream.h, объект типа int может
также быть вторым операндом <<, когда первый операнд ostream. <br>  Тип объекта  определяет не только то, какие операции могут к нему
применяться, но и смысл этих операций. Например, оператор
</pre>

<pre>
  cout << inch << " in=" &lt;&lt; inch*2.54 &lt;&lt; " cm\n"; </pre>

правильно обрабатывает  четыре входных  значения различным образом.
Строки печатаются  буквально, тогда  как целое  inch и  значение  с
плавающей  точкой   inch*2.54  преобразуются   из  их   внутреннего
представления в  подходящее  для  человеческого  глаза  символьное
представление.

  В  C++   есть  несколько  основных  типов  и  несколько  способов
создавать новые.  Простейшие виды типов C++ описываются в следующих
разделах, а более интересные оставлены на потом.
<a name="gl1.3.1">
</a></pre>

<h3 align="center"><a name="gl1.3.1">1.3.1 Основные
Tипы</a></h3>

<p><a name="gl1.3.1">Основные типы, наиболее
непосредственно отвечающие
средствам аппаратного обеспечения,
такие: </a></p>

<pre><a name="gl1.3.1">
  char  short  int  long  float  double
</a></pre>

<pre><a name="gl1.3.1">
Первые четыре  типа используются для представления целых, последние
два -  для представления  чисел с плавающей точкой. Переменная типа
char имеет  размер, естественный  для хранения  символа  на  данной
машине  (обычно,   байт),  а  переменная  типа  int  имеет  размер,
соответствующий целой арифметике на  данной машине (обычно, слово).
Диапазон  целых  чисел,  которые  могут  быть  представлены  типом,
зависит от его размера. В C++ размеры измеряются в единицах размера
данных типа char, поэтому char по определению имеет размер единица.
Соотношение между основными типами можно записать так:
</a></pre>

<pre><a name="gl1.3.1">
  1 = sizeof(char) <= sizeof(short) <="sizeof(int)" <="sizeof(long)" sizeof(float) <="sizeof(double)" </pre>

В целом,  предполагать что-либо  еще  относительно  основных  типов
неразумно. В  частности, то,  что  целое  достаточно  для  хранения
указателя, верно не для всех машин.

  К основному  типу можно  применять прилагательное const. Это дает
тип, имеющий  те же  свойства, что  и исходный  тип, за исключением
того, что значение переменных типа const  не может изменяться после
инициализации.
</a></pre>

<pre><a name="gl1.3.1">
  const float pi = 3.14;
  const char plus = '+';
</a></pre>

<pre><a name="gl1.3.1">
  Символ, заключенный  в  одинарные  кавычки,  является  символьной
константой.  Заметьте,  что  часто  константа,  определенная  таким
образом, не занимает память; просто там, где требуется, ее значение
может    использоваться     непосредственно.    Константа    должна
инициализироваться  при   описании.  Для  переменных  инициализация
необязательна,  но   настоятельно  рекомендуется.   Оснований   для
введения локальной переменной без ее инициализации очень немного.

  К любой  комбинации этих  типов могут  применяться арифметические
операции:
</a></pre>

<table border="0">
    <tr>
        <td><a name="gl1.3.1">+ </a></td>
        <td><a name="gl1.3.1">(плюс, унарный и
        бинарный)</a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1">- </a></td>
        <td><a name="gl1.3.1">(минус, унарный и
        бинарный)</a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1">* </a></td>
        <td><a name="gl1.3.1">(умножение) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1">/ </a></td>
        <td><a name="gl1.3.1">(деление)</a></td>
    </tr>
</table>

<pre><a name="gl1.3.1">
А также операции сравнения:
</a></pre>

<table border="0">
    <tr>
        <td><a name="gl1.3.1">== </a></td>
        <td><a name="gl1.3.1">(равно) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1">!= </a></td>
        <td><a name="gl1.3.1">(не равно) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1"><</TD></a></td>
        <td><a name="gl1.3.1">(меньше) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1">&gt; </a></td>
        <td><a name="gl1.3.1">(больше) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1"><= </TD></a></td>
        <td><a name="gl1.3.1">(меньше или равно) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.1">&gt;= </a></td>
        <td><a name="gl1.3.1">(больше или равно) </a></td>
    </tr>
</table>

<pre><a name="gl1.3.1">
Заметьте, что  целое деление  дает целый результат: 7/2 есть 3. Над
целыми может выполняться операция % получения остатка: 7%2 равно 1.

   При  присваивании и  арифметических операциях  C++ выполняет все
осмысленные преобразования  между основными типами, чтобы их можно
было сочетать без ограничений:
</a></pre>

<pre><a name="gl1.3.1">
  double d = 1;
  int i = 1;
  d = d + i;
  i = d + i;
</a></pre>

<h3 align="center"><a name="gl1.3.2">1.3.2 Производные
Типы</a></h3>

<p><a name="gl1.3.2">Вот операции, создающие
из основных типов новые типы: </a></p>

<table border="0">
    <tr>
        <td><a name="gl1.3.2">* </a></td>
        <td><a name="gl1.3.2">указатель на </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.2">*const </a></td>
        <td><a name="gl1.3.2">константный
        указатель на </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.2">&amp; </a></td>
        <td><a name="gl1.3.2">ссылка на </a></td>
    </tr>
    <tr>
        <td><a name="gl1.3.2">[] </a></td>
        <td><a name="gl1.3.2">вектор</a><a href="#*1.2">*<sup>2</sup></a>
        </td>
    </tr>
    <tr>
        <td>() </td>
        <td>функция, возвращающая </td>
    </tr>
</table>

<pre>
  Например:
</pre>

<table border="0">
    <tr>
        <td>char* p </td>
        <td>// указатель на символ </td>
    </tr>
    <tr>
        <td>char *const q </td>
        <td>// константный указатель на
        символ </td>
    </tr>
    <tr>
        <td>char v[10] </td>
        <td>// вектор из 10 символов </td>
    </tr>
</table>

<pre>
Все вектора в качестве нижней границы индекса имеют ноль, поэтому в
v десять  элементов: v[0] ...  v[9].  Функции  объясняются  в <a
href="#gl1.5"> #1.5</a>,
ссылки в  <a href="#gl1.9">#1.9</a>. Переменная  указатель может содержать адрес объекта соответствующего типа:
</pre>

<pre>
  char c;
  // ...
  p = &amp;c // p указывает на c
</pre>

<pre>
Унарное &amp; является операцией взятия адреса.
<a name="gl1.4">
</a></pre>

<h2 align="center"><a name="gl1.4">1.4 Выражения и
Операторы</a></h2>

<table border="0">
    <tr>
        <td width="10"><a name="gl1.4"></a>&nbsp;</td>
        <td><a href="#gl1.4.1">1.4.1 Выражения </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.2">1.4.2 Операторы
        Выражения </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.3">1.4.3 Пустой
        оператор </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.4">1.4.4 Блоки </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.5">1.4.5 Операторы if </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.6">1.4.6 Операторы switch </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.7">1.4.7 Оператор while </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.8">1.4.8 Оператор for </a></td>
    </tr>
    <tr>
        <td width="10">&nbsp;</td>
        <td><a href="#gl1.4.9">1.4.9 Описания </a></td>
    </tr>
</table>

<p>В C++ имеется богатый набор
операций, с помощью которых в
выражениях образуются новые
значения и изменяются значения
переменных. Поток управления в
программе задается с помощью
операторов , а описания
используются для введения в
программе имен переменных,
констант и т.д. Заметьте, что
описания являются операторами,
поэтому они свободно могут
сочетаться с другими операторами. </p>

<h3 align="center"><a name="gl1.4.1">1.4.1 Выражения</a></h3>

<p><a name="gl1.4.1">В C++ имеется большое
число операций, и они будут
объясняться там, где (и если) это
потребуется. Следует учесть, что
операции </a></p>

<table border="0">
    <tr>
        <td><a name="gl1.4.1">~ </a></td>
        <td><a name="gl1.4.1">(дополнение) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.4.1">&amp; </a></td>
        <td><a name="gl1.4.1">(И) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.4.1">^ </a></td>
        <td><a name="gl1.4.1">(исключающее ИЛИ) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.4.1">| </a></td>
        <td><a name="gl1.4.1">(включающее ИЛИ) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.4.1"><< </TD></a></td>
        <td><a name="gl1.4.1">(логический сдвиг
        влево) </a></td>
    </tr>
    <tr>
        <td><a name="gl1.4.1">&gt;&gt; </a></td>
        <td><a name="gl1.4.1">(логический сдвиг
        вправо)</a></td>
    </tr>
</table>

<pre><a name="gl1.4.1">
применяются  к   целым,  и  что  нет  отдельного  типа  данных  для
логических действий.

  Смысл операции  зависит от  числа операндов;  унарное &amp;  является
операцией взятия адреса, а бинарное &amp; - это операция логического И.
Смысл операции  зависит также  от типа  ее операндов: + в выражении
a+b означает  сложение с  плавающей точкой, если операнды имеют тип
float, но  целое сложение,  если они  типа int. В </a><a
href="#gl1.8">#1.8</a> объясняется,
как   можно    определить   операцию    для   типа,   определяемого
пользователем,  без   потери  ее  значения,  предопределенного  для
основных и производных типов.

  В C++  есть операция  присваивания =, а не оператор присваивания,
как  в   некоторых  языках.   Таким  образом,   присваивание  может
встречаться в  неожиданном контексте;  например, x=sqrt(a=3*x). Это
бывает полезно.  a=b=c означает  присвоение c  объекту   b, а затем
объекту  a. Другим свойством операции присваивания является то, что
она может  совмещаться с  большинством бинарных операций. Например,
x[i+3]*=4 означает  x[i+3]=x[i+3]*4, за исключением того факта, что
выражение  x[i+3]   вычисляется   только   один   раз.   Это   дает
привлекательную степень эффективности без необходимости обращения к
оптимизирующим компиляторам. К тому же это более кратко.

  В большинстве  программ  на  C++  широко  применяются  указатели.
Унарная операция  * разыменовывает<a
href="#*1.3">*<sup>3</sup></a> указатель, т.е. *p есть объект, на который  указывает p.  Эта операция  также называется  косвенной
адресацией. Например,  если имеется  char* p, то *p есть символ, на
который указывает p.  Часто при работе с указателями бывают полезны
операция увеличения  ++ и  операция уменьшения  --. Предположим,  p
указывает на  элемент вектора  v, тогда p++ делает p указывающим на
следующий элемент.
<a name="gl1.4.2">
</a></pre>

<h3 align="center"><a name="gl1.4.2">1.4.2 Операторы
Выражения</a></h3>

<p><a name="gl1.4.2">Самый обычный вид
оператора - оператор выражение. Он
состоит из выражения, за которым
следует точка с запятой. Например: </a></p>

<pre><a name="gl1.4.2">
  a = b*3+c;
  cout << "go go go"; lseek(fd,0,2); </pre>
</a><a name="gl1.4.3">
</a></pre>

<h3 align="center"><a name="gl1.4.3">1.4.3 Пустой
оператор</a></h3>

<p><a name="gl1.4.3">Простейшей формой
оператора является пустой
оператор: <br>
<br>
; </a></p>

<p><a name="gl1.4.3">Он не делает ничего.
Однако он может быть полезен в тех
случаях, когда синтаксис требует
наличие оператора, а вам оператор
не нужен. </a></p>

<h3 align="center"><a name="gl1.4.4">1.4.4 Блоки </a></h3>

<p><a name="gl1.4.4">Блок - это возможно
пустой список операторов,
заключенный в фигурные скобки: </a></p>

<pre><a name="gl1.4.4">
  { a=b+2; b++; }
</a></pre>

<pre><a name="gl1.4.4">
Блок позволяет рассматривать несколько операторов как один. Область
видимости имени,  описанного в  блоке, простирается до конца блока.
Имя можно  сделать невидимым  с помощью описаний такого же имени во
внутренних блоках.
</a><a name="1.4.5">
</a></pre>

<h3 align="center"><a name="1.4.5">1.4.5 Операторы if </a></h3>

<p><a name="1.4.5">Программа в следующем
примере осуществляет
преобразование дюймов в сантиметры
и сантиметров в дюймы;
предполагается, что вы укажете
единицы измерения вводимых данных,
добавляя i для дюймов и c для
сантиметров: </a></p>

<pre><a name="1.4.5">
  #include

  main()
  {
      const float fac = 2.54;
      float x, in, cm;
      char ch = 0;

      cout << "введите длину: "; cin>&gt; x &gt;&gt; ch;

      if (ch == 'i') {       // inch - дюймы
          in = x;
          cm = x*fac;
      }
      else if (ch == 'c')   //  cm - сантиметры
          in = x/fac;
          cm = x;
      }
      else
          in = cm = 0;

      cout << in << " in=" &lt;&lt; cm &lt;&lt; " cm\n"; } </pre>

Заметьте, что  условие в  операторе  if  должно  быть  заключено  в
круглые скобки.
</a><a name="gl1.4.6">
</a></pre>

<h3 align="center"><a name="gl1.4.6">1.4.6 Операторы
switch </a></h3>

<p><a name="gl1.4.6">Оператор switch производит
сопоставление значения с
множеством констант. Проверки в
предыдущем примере можно записать
так: </a></p>

<pre><a name="gl1.4.6">
  switch (ch) {
  case 'i':
      in = x;
      cm = x*fac;
      break;
  case 'c':
      in = x/fac;
      cm = x;
      break;
  default:
      in = cm = 0;
      break;
  }
</a></pre>

<pre><a name="gl1.4.6">
  Операторы break  применяются  для  выхода  из  оператора  switch.
Константы  в   вариантах  case   должны  быть  различными,  и  если
проверяемое  значение   не  совпадает   ни  с  одной  из  констант,
выбирается   вариант    default.   Программисту    не   обязательно
предусматривать default.
</a><a name="gl1.4.7">
</a></pre>

<h3 align="center"><a name="gl1.4.7">1.4.7 Оператор while
</a></h3>

<p><a name="gl1.4.7">Рассмотрим копирование
строки, когда заданы указатель p на
ее первый символ и указатель q на
целевую строку. По соглашению
строка оканчивается символом с
целым значением 0. </a></p>

<pre><a name="gl1.4.7">
  while (p != 0) {
      *q = *p;        // скопировать символ
      q = q+1;
      p = p+1;
  }
  *q = 0;             // завершающий символ 0 скопирован не был
</a></pre>

<pre><a name="gl1.4.7">
Следующее после  while условие  должно  быть  заключено  в  круглые
скобки.  Условие   вычисляется,  и   если  его  значение  не  ноль,
выполняется  непосредственно   следующий  за   ним  оператор.   Это
повторяется до тех пор, пока вычисление условия не даст ноль.

  Этот пример  слишком пространен.  Можно использовать  операцию ++
для непосредственного указания увеличения, и проверка упростится:
</a></pre>

<pre><a name="gl1.4.7">
  while (*p)  *q++ = *p++;
  *q = 0;
</a></pre>

<pre><a name="gl1.4.7">
где конструкция  *p++ означает: &quot;взять символ, на который указывает
p, затем увеличить  p.&quot;

  Пример можно  еще упростить, так как указатель p разыменовывается
дважды за  каждый цикл.  Копирование символа можно делать тогда же,
когда производится проверка условия:
</a></pre>

<pre><a name="gl1.4.7">
  while (*q++ = *p++) ;
</a></pre>

<pre><a name="gl1.4.7">
Здесь берется символ, на который указывает p, p увеличивается, этот
символ копируется  туда, куда  указывает q, и q увеличивается. Если
символ  ненулевой,   цикл   повторяется.   Поскольку   вся   работа
выполняется в  условии,  не  требуется  ни одного  оператора.  Чтобы
указать на  это,  используется  пустой  оператор.  C++  (как  и  C)
одновременно любят  и ненавидят  за возможность  такого чрезвычайно
краткого ориентированного на выразительность программирования </a><a
href="#*1.4">*<sup>4</sup></a>.
<a name="gl1.4.8">
</a></pre>

<h3 align="center"><a name="gl1.4.8">1.4.8 Оператор for </a></h3>

<p><a name="gl1.4.8">Рассмотрим копирование
десяти элементов одного вектора в
другой: </a></p>

<pre><a name="gl1.4.8">
  for (int i=0; i<10; i++) q[i]="p[i];" </pre>

Это эквивалентно
</a></pre>

<pre><a name="gl1.4.8">
  int i = 0;
  while (i<10) { q[i]="p[i];" i++; } </pre>

но  более   удобочитаемо,  поскольку  вся  информация,  управляющая
циклом,  локализована.   При  применении   операции  ++    к  целой
переменной к ней просто добавляется единица. Первая часть оператора
for не  обязательно должна  быть описанием,  она может  быть  любым
оператором. Например:
</a></pre>

<pre><a name="gl1.4.8">
  for (i=0; i<10; i++) q[i]="p[i];" </pre>

тоже  эквивалентно   предыдущей   записи   при   условии,   что   i
соответствующим образом описано раньше.
</a><a name="gl1.4.9">
</a></pre>

<h3 align="center"><a name="gl1.4.9">1.4.9 Описания </a></h3>

<p><a name="gl1.4.9">Описание - это оператор,
вводящий имя в программе. Оно может
также инициализировать объект с
этим именем. Выполнение описания
означает, что когда поток
управления доходит до описания,
вычисляется инициализирующее
выражение (инициализатор) и
производится инициализация.
Например: </a></p>

<pre><a name="gl1.4.9">
  for (int i = 1; i
</a></pre>

<h2><a name="gl1.5">1.5 Функции </a></h2>

<p><a name="gl1.5">Функция - это именованная
часть программы, к которой можно
обращаться из других частей
программы столько раз, сколько
потребуется. Рассмотрим программу,
печатающую степени числа 2: </a></p>

<pre><a name="gl1.5">
  extern float pow(float, int); //pow() определена в другом месте

  main()
  {
      for (int i=0; i<10; i++) cout << pow(2,i) << "\n"; } </pre>

Первая строка  функции -  описание, указывающее, что pow - функция,
получающая  параметры  типа  float  и  int  и  возвращающая  float.
Описание функции используется для того, чтобы сделать определенными
обращения к функции в других местах.

  При  вызове   тип  каждого  параметра  функции  сопоставляется  с
ожидаемым типом  точно  так  же,  как  если  бы  инициализировалась
переменная описанного  типа. Это гарантирует надлежащую  проверку и
преобразование типов.  Например, обращение  pow(12.3,&quot;abcd&quot;) вызовет
недовольство компилятора,  поскольку &quot;abcd&quot;  является строкой, а не
int. При вызове pow(2,i) компилятор преобразует 2 к типу float, как
того требует  функция. Функция  pow может  быть определена например
так:
</a></pre>

<pre><a name="gl1.5">
  float pow(float x, int n)
  {
   if (n <0) error("извините, отрицательный показатель для pow()"); switch (n) { case 0: return 1; case 1: return x; default: return x*pow(x,n-1); } } </pre>

Первая  часть   определения  функции   задает  имя   функции,   тип
возвращаемого ею  значения (если таковое имеется) и типы и имена ее
параметров (если  они есть).  Значение возвращается  из  функции  с
помощью оператора return.

  Разные  функции   обычно  имеют   разные  имена,   но   функциям,
выполняющим сходные  действия над объектами различных типов, иногда
лучше  дать  возможность  иметь  одинаковые  имена.  Если  типы  их
параметров различны,  то компилятор  всегда может  различить  их  и
выбрать для  вызова нужную  функцию. Может,  например, иметься одна
функция возведения  в степень  для целых  переменных и  другая  для
переменных с плавающей точкой:
</a></pre>

<pre><a name="gl1.5">
  overload pow;
  int pow(int, int);
  double pow(double, double);
  //...
  x=pow(2,10);
  y=pow(2.0,10.0);

  Описание

  overload pow;
</a></pre>

<pre><a name="gl1.5">
сообщает компилятору,  что использование  имени pow  более чем  для
одной функции является умышленным.

  Если функция  не возвращает  значения, то  ее следует описать как
void:
</a></pre>

<pre><a name="gl1.5">
  void swap(int* p, int* q)    // поменять местами
  {
      int t = *p;
      *p = *q;
      *q = t;
  }
</a></pre>

<h2 align="center"><a name="gl1.6">1.6 Структура
программы </a></h2>

<p><a name="gl1.6">Программа на C++ обычно
состоит из большого числа исходных
файлов, каждый из которых содержит
описания типов, функций, переменных
и констант. Чтобы имя можно было
использовать в разных исходных
файлах для ссылки на один и тот же
объект, оно должно быть описано как
внешнее. Например: </a></p>

<pre><a name="gl1.6">
  extern double sqrt(double);
  extern instream cin;
</a></pre>

<pre><a name="gl1.6">
Самый обычный  способ обеспечить  согласованность исходных файлов -
это  поместить   такие  описания   в  отдельные  файлы,  называемые
заголовочными (или  хэдер)  файлами,  а  затем  включить,  то  есть
скопировать, эти  заголовочные файлы  во все  файлы, где  нужны эти
описания. Например,  если описание  sqrt  хранится  в  заголовочном
файле для  стандартных математических  функций math.h,  и вы хотите
извлечь квадратный корень из 4, можно написать:
</a></pre>

<pre><a name="gl1.6">
  #include
  //...
  x = sqrt(4);
</a></pre>

<pre><a name="gl1.6">
Поскольку обычные  заголовочные файлы включаются во многие исходные
файлы, они  не содержат  описаний, которые  не должны  повторяться.
Например,  тела  функций  даются  только  для  inline-подставляемых
функций  (</a><a href="#gl1.12">#1.12</a>)   и  инициализаторы  даются  только  для  констант (<a
href="#gl1.3.1">#1.3.1</a>). За  исключением этих  случаев, заголовочный файл является хранилищем информации  о типах.  Он  обеспечивает  интерфейс  между
отдельно компилируемыми частями программы.

  В команде  включения include  имя файла,  заключенное  в  угловые
скобки, например  , относится  к  файлу  с  этим  именем  в
стандартном  каталоге   (часто  это   /usr/include/CC);  на  файлы,
находящиеся в  каких-либо других  местах ссылаются  с помощью имен,
заключенных в двойные кавычки. Например:
</pre>

<pre>
  #include &quot;math1.h&quot;
  #include &quot;/usr/bs/math2.h&quot;
</pre>

<pre>
включит math1.h  из текущего  пользовательского каталога, а math2.h
из каталога /usr/bs.

  Здесь приводится  очень маленький законченный пример программы, в
котором строка определяется в одном файле, а ее печать производится
в другом. Файл header.h определяет необходимые типы:
</pre>

<pre>
  // header.h

  extern char* prog_name;
  extern void f();
</pre>

<pre>
  В файле main.c находится главная программа:
</pre>

<pre>
  // main.c

  #include &quot;header.h&quot;
  char* prog_name = &quot;дурацкий, но полный&quot;;
  main()
  {
      f();
  }
</pre>

<pre>
а файл f.c  печатает строку:
</pre>

<pre>
  // f.c

  #include
  #include &quot;header.h&quot;
  void f()
  {
      cout << prog_name << "\n"; } </pre>

  Скомпилировать и запустить программу вы можете например так:
</pre>

<pre>
  $ CC main.c f.c -o silly
  $ silly
  дурацкий, но полный
  $
</pre>

<h2><a name="gl1.7">1.7 Классы </a></h2>

<p><a name="gl1.7">Давайте посмотрим, как мы
могли бы определить тип потока
вывода ostream. Чтобы упростить задачу,
предположим, что для буферизации
определен тип streambuf. Тип streambuf на
самом деле определен в , где также
находится и настоящее определение
ostream. Пожалуйста, не испытывайте
примеры, определяющие ostream в этом и
последующих разделах; пока вы не
сможете полностью избежать
использования , компилятор будет
возражать против переопределений. <br>
Определение типа, определяемого
пользователем (который в C++
называется class, т.е. класс),
специфицирует данные, необходимые
для представления объекта этого
типа, и множество операций для
работы с этими объектами.
Определение имеет две части:
закрытую (private) часть, содержащую
информацию, которой может
пользоваться только его
разработчик, и открытую (public) часть,
представляющую интерфейс типа с
пользователем: </a></p>

<pre><a name="gl1.7">
  class ostream {
      streambuf* buf;
      int state;
  public:
      void put(char*);
      void put(long);
      void put(double);
  }
</a></pre>

<pre><a name="gl1.7">
Описания после  метки public  задают интерфейс:  пользователь может
обращаться только  к трем  функциям put().  Описания  перед  меткой
public задают  представление объекта  класса ostream;  имена buf  и
state могут  использоваться только  функциями put(),  описанными  в
открытой части.

  class  определяет   тип,  а   не  объект  данных,  поэтому  чтобы
использовать ostream,  мы должны один такой объект описать (так же,
как мы описываем переменные типа int):
</a></pre>

<pre><a name="gl1.7">
  ostream my_out;
</a></pre>

<pre><a name="gl1.7">
Считая, что  my_out был  соответствующим образом проинициализирован
(как, объясняется в </a><a href="#gl1.10">#1.10</a>), его можно использовать например так:
</pre>

<pre>
  my_out.put(&quot;Hello, world\n&quot;);
</pre>

<pre>
С помощью  операции точка    выбирается  член  класса  для  данного
объекта этого  класса. Здесь  для объекта  my_out  вызывается  член
функция put().

  Функция может определяться так:
</pre>

<pre>
  void ostream::put(char* p)
  {
      while (*p) buf.sputc(*p++);
  }
</pre>

<pre>
где   sputc() -  функция,  которая  помещает  символ  в  streambuf.
Префикс ostream необходим, чтобы отличить put() ostream'а от других
функций с именем put().

  Для обращения к функции члену должен быть указан объект класса. В
функции члене  можно ссылаться  на  этот  объект  неявно,  как  это
делалось выше  в ostream::put():  в каждом  вызове buf  относится к
члену buf объекта, для которого функция вызвана.

  Можно также ссылаться на этот объект явно посредством указателя с
именем   this. В  функции члене класса X this неявно описан как  X*
(указатель на  X) и  инициализирован указателем  на тот объект, для
которого эта  функция  вызвана.  Определение  ostream::put()  можно
также записать в виде:
</pre>

<pre>
  void ostream::put(char* p)
  {
      while (*p) this-&gt;buf.sputc(*p++);
  }
</pre>

<pre>
 Операция  -&gt;   применяется  для  выбора  члена  объекта,  заданного
указателем.
<a name="gl1.8">
</a></pre>

<h2 align="center"><a name="gl1.8">1.8 Перегрузка
операций </a></h2>

<p><a name="gl1.8">Настоящий класс ostream
определяет операцию <<, чтобы сделать удобным вывод нескольких объектов одним оператором. Давайте посмотрим, как это сделано. <br> Чтобы
определить @, где @ - некоторая
операция языка C++, для каждого
определяемого пользователем типа
вы определяете функцию с именем
operator@, которая получает параметры
соответствующего типа. Например: </a></p>

<pre><a name="gl1.8">
  class ostream {
      //...
      ostream operator<<(char*); }; ostream ostream::operator<<(char* p) { while (*p) buf.sputc(*p++); return *this; } </pre>

определяет операцию  << как член класса ostream, поэтому s< "); <br>а если  применить операцию  взятия адреса,  то  вы  получите  адрес
объекта, на который ссылается ссылка:
</a></pre>

<pre><a name="gl1.8">
  &amp;s1 == &amp;my_out
</a></pre>

<pre><a name="gl1.8">
  Первая очевидная польза от ссылок состоит в том, чтобы обеспечить
передачу адреса  объекта, а не самого объекта, в функцию вывода (в
некоторых языках это называется передачей параметра по ссылке):
</a></pre>

<pre><a name="gl1.8">
  ostream&amp; operator<<(ostream& s, complex z) { return s << "(" << z.real << "," << z.imag << ")"; } </pre>

Достаточно интересно,  что тело  функции осталось без изменений, но
если   вы   будете   осуществлять   присваивание   s,   то   будете
воздействовать на  сам объект,  а не  на его копию. В данном случае
то,  что   возвращается  ссылка,   также  повышает   эффективность,
поскольку очевидный  способ реализации  ссылки -  это указатель,  а
передача указателя  гораздо дешевле, чем передача большой структуры
данных.

  Ссылки также  существенны для определения потока ввода, поскольку
операция  ввода   получает  в   качестве  операнда  переменную  для
считывания. Если  бы  ссылки  не  использовались,  то  пользователь
должен был бы явно передавать указатели в функции ввода.
</a></pre>

<pre><a name="gl1.8">
  class istream {
      //...
      int state;
  public:
      istream&amp; operator&gt;&gt;(char&amp;);
      istream&amp; operator&gt;&gt;(char*);
      istream&amp; operator&gt;&gt;(int&amp;);
      istream&amp; operator&gt;&gt;(long&amp;);
      //...
  };
</a></pre>

<pre><a name="gl1.8">
Заметьте, что  для чтения  long и  int используются разные функции,
тогда как для их печати требовалась только одна. Это вполне обычно,
и причина  в том,  что int  может  быть  преобразовано  в  long  по
стандартным правилам  неявного  преобразования  (</a><a
href="ref1_7.htm#ref1_7.6.6">#с.6.6</a>),  избавляя таким образом  программиста от  беспокойства  по  поводу  написания
обеих функций ввода.
<a name="gl1.10">
</a></pre>

<h2 align="center"><a name="gl1.10">1.10 Конструкторы
</a></h2>

<p><a name="gl1.10">Определение ostream как
класса сделало члены данные
закрытыми. Только функция член
имеет доступ к закрытым членам,
поэтому надо предусмотреть функцию
для инициализации. Такая функция
называется конструктором и
отличается тем, что имеет то же имя,
что и ее класс: </a></p>

<pre><a name="gl1.10">
  class ostream {
      //...
      ostream(streambuf*);
      ostream(int size, char* s);
  };
</a></pre>

<pre><a name="gl1.10">
Здесь  задано   два  конструктора.   Один  получает  вышеупомянутый
streambuf для  реального вывода, другой получает размер и указатель
на символ  для форматирования  строки. В  описании необходимый  для
конструктора список  параметров присоединяется  к имени.  Теперь вы
можете, например, описать такие потоки:
</a></pre>

<pre><a name="gl1.10">
  ostream my_out(&amp;some_stream_buffer);
  char xx[256];
  ostream xx_stream(256,xx);
</a></pre>

<pre><a name="gl1.10">
Описание my_out  не  только  задает  соответствующий  объем  памяти
где-то   в   другом   месте,   оно   также   вызывает   конструктор
ostream::ostream(streambuf*), чтобы инициализировать его параметром
&amp;some_stream_buffer,  предположительно   указателем  на  подходящий
объект класса  streambuf.  Описание  конструкторов  для  класса  не
только дает  способ инициализации  объектов, но  также обеспечивает
то, что  все объекты  этого класса  будут проинициализированы. Если
для  класса   были  описаны  конструкторы,  то  невозможно  описать
переменную этого  класса так, чтобы конструктор не был вызван. Если
класс  имеет   конструктор,  не   получающий  параметров,  то  этот
конструктор будет  вызываться в  том случае, если в описании нет ни
одного параметра.
</a><a name="gl1.11">
</a></pre>

<h2 align="center"><a name="gl1.11">1.11 Вектора </a></h2>

<p><a name="gl1.11">Встроенное в C++ понятие
вектора было разработано так, чтобы
обеспечить максимальную
эффективность выполнения при
минимальном расходе памяти. Оно
также (особенно когда используется
совместно с указателями) является
весьма универсальным инструментом
для построения средств более
высокого уровня. Вы могли бы,
конечно, возразить, что размер
вектора должен задаваться как
константа, что нет проверки выхода
за границы вектора и т.д. Ответ на
подобные возражения таков: &quot;Вы
можете запрограммировать это
сами.&quot; Давайте посмотрим,
действительно ли оправдан такой
ответ. Другими словами, проверим
средства абстракции языка C++,
попытавшись реализовать эти
возможности для векторных типов,
которые мы создадим сами, и
посмотрим, какие с этим связаны
трудности, каких это требует
затрат, и насколько получившиеся
векторные типы удобны в обращении. </a></p>

<pre><a name="gl1.11">
  class vector {
      int* v;
      int  sz;
  public:
          vector(int);      // конструктор
          ~vector();        // деструктор
      int size() { return sz; }
      void set_size(int);
      int&amp; operator[](int);
      int&amp; elem(int i) { return v[i]; }
  };
</a></pre>

<pre><a name="gl1.11">
 Функция size  возвращает число  элементов  вектора,  таким  образом
индексы должны  лежать в диапазоне 0 ... size()-1. Функция set_size
сделана для  изменения этого  размера, elem  обеспечивает доступ  к
элементам  без   проверки  индекса,  а  operator[]  дает  доступ  с
проверкой границ.

  Идея состоит в том, чтобы класс сам был структурой фиксированного
размера, управляющей доступом к фактической памяти вектора, которая
выделяется конструктором вектора с помощью распределителя свободной
памяти new:
</a></pre>

<pre><a name="gl1.11">
  vector::vector(int s)
  {
      if (s<=0) error("плохой размер вектора"); sz="s;" v="new" int[s]; } </pre>

Теперь вы  можете описывать  вектора  типа  vector  почти  столь  же
элегантно, как и вектора, встроенные в сам язык:
</a></pre>

<pre><a name="gl1.11">
  vector v1(100);
  vector v2(nelem*2-4);
</a></pre>

<pre><a name="gl1.11">
Операцию доступа можно определить как
</a></pre>

<pre><a name="gl1.11">
  int&amp; vector::operator[](int i)
  {
      if(i<0 || sz<="i)" error("индекс выходит за границы"); return v[i]; } </pre>

Операция ||  (ИЛИИЛИ) -  это логическая  операция  ИЛИ.  Ее  правый
операнд вычисляется  только тогда,  когда это  необходимо, то  есть
если вычисление  левого  операнда  дало  ноль.  Возвращение  ссылки
обеспечивает то, что запись [] может использоваться с любой стороны
операции присваивания:
</a></pre>

<pre><a name="gl1.11">
  v1[x] = v2[y];
</a></pre>

<pre><a name="gl1.11">
  Функция со  странным именем  ~vector -  это деструктор,  то  есть
функция, описанная  для того,  чтобы она  неявно вызывалась,  когда
объект класса  выходит из  области видимости.  Деструктор класса  C
имеет имя ~C. Если его определить как
</a></pre>

<pre><a name="gl1.11">
  vector::~vector()
  {
      delete v;
  }
</a></pre>

<pre><a name="gl1.11">
то он  будет, с  помощью операции delete, освобождать пространство,
выделенное конструктором,  поэтому когда  vector выходит из области
видимости, все  его пространство  возвращается обратно в память для
дальнейшего использования.
</a><a name="gl1.12">
</a></pre>

<h2 align="center"><a name="gl1.12">1.12
Inline-подстановка </a></h2>

<p><a name="gl1.12">Если часто повторяется
обращение к очень маленькой
функции, то вы можете начать
беспокоиться о стоимости вызова
функции. Обращение к функции члену
не дороже обращения к функции не
члену с тем же числом параметров
(надо помнить, что функция член
всегда имеет хотя бы один параметр),
и вызовы в функций в C++ примерно
столь же эффективны, сколь и в любом
языке. Однако для слишком маленьких
функций может встать вопрос о
накладных расходах на обращение. В
этом случае можно рассмотреть
возможность спецификации функции
как inline-подставляемой. Если вы
поступите таким образом, то
компилятор сгенерирует для функции
соответствующий код в месте ее
вызова. Семантика вызова не
изменяется. Если, например, size и elem
inline-подставляемые, то </a></p>

<pre><a name="gl1.12">
  vector s(100);
  //...
  i = s.size();
  x = elem(i-1);
</a></pre>

<pre><a name="gl1.12">
порождает код, эквивалентный
</a></pre>

<pre><a name="gl1.12">
  //...
  i = 100;
  x = s.v[i-1];
</a></pre>

<pre><a name="gl1.12">
C++  компилятор   обычно  достаточно  разумен,  чтобы  генерировать
настолько хороший  код, насколько  вы можете  получить в результате
прямого макрорасширения.  Разумеется,  компилятор  иногда  вынужден
использовать временные  переменные и другие уловки, чтобы сохранить
семантику.

  Вы можете  указать, что  вы хотите,  чтобы функция  была  inline-
подставляемой, поставив  ключевое слово  inline, или,  для  функции
члена, просто  включив определение  функции в  описание класса, как
это сделано в предыдущем примере для size() и elem().

  При хорошем  использовании inline-функции резко повышают скорость
выполнения и  уменьшают размер  объектного  кода.  Однако,  inline-
функции запутывают  описания и могут замедлить компиляцию, поэтому,
если они  не необходимы,  то их  желательно избегать. Чтобы inline-
функция  давала  существенный  выигрыш    по  сравнению  с  обычной
функцией, она должна быть очень маленькой.
</a><a name="1.13">
</a></pre>

<h2 align="center"><a name="1.13">1.13 Производные
классы </a></h2>

<p><a name="1.13">Теперь давайте определим
вектор, для которого пользователь
может задавать границы изменения
индекса. </a></p>

<pre><a name="1.13">
  class vec: public vector {
      int low, high;
  public:
      vec(int,int);
      int&amp; elem(int);
      int&amp; operator[](int);
  };
</a></pre>

<pre><a name="1.13">
Определение vec как
</a></pre>

<pre><a name="1.13">
  :public vector
</a></pre>

<pre><a name="1.13">
означает, в  первую очередь,  что vec  это vector. То есть, тип vec
имеет (наследует) все свойства типа vector дополнительно к тем, что
описаны специально  для него.  Говорят, что  класс vector  является
базовым классом  для vec,  а о vec говорится, что он производный от
vector.
 
 Класс vec  модифицирует класс  vector тем,  что  в  нем  задается
другой конструктор,  который требует  от пользователя указывать две
границы изменения  индекса, а  не длину, и имеются свои собственные
функции доступа  elem(int) и operator[](int). Функция elem() класса
vec легко выражается через elem() класса vector:
</a></pre>

<pre><a name="1.13">
  int&amp; vec::elem(int i)
  {
      return vector::elem(i-low);
  }
</a></pre>

<pre><a name="1.13">
Операция разрешения  области видимости  :: используется  для  того,
чтобы не  было бесконечной  рекурсии обращения к vec::elem() из нее
самой. с помощью унарной операции :: можно ссылаться на нелокальные
имена. Было  бы разумно  описать vec::elem() как inline, поскольку,
скорее  всего,   эффективность   существенна,   но   необязательно,
неразумно и  невозможно написать  ее так, чтобы она непосредственно
использовала закрытый  член v  класса vector.  Фунции  производного
класса не имеют специального доступа к закрытым членам его базового
класса.

  Конструктор можно написать так:
</a></pre>

<pre><a name="1.13">
  vec::vec(int lb, int hb) : (hb-lb+1)
  {
      if (hb-lb<0) hb="lb;" low="lb;" high="hb;" } </pre>

Запись :  (hb-lb+1) используется  для определения списка параметров
конструктора базового  класса  vector::vector().  Этот  конструктор
вызывается перед  телом vec::vec().  Вот небольшой  пример, который
можно  запустить,  если  скомпилировать  его  вместе  с  остальными
описаниями vector:
</a></pre>

<pre><a name="1.13">
  #include

  void error(char* p)
  {
      cerr << p << "n\"; // cerr выходной поток сообщений об ошибках exit(1); } void vector::set_size(int) { /* пустышка */ } int& vec::operator[](int i) { if (i </pre>
</a><a name="gl1.14">
</a></pre>

<h2 align="center"><a name="gl1.14">1.14 Еще об
операциях </a></h2>

<p><a name="gl1.14">Другое направление
развития - снабдить вектора
операциями: </a></p>

<pre><a name="gl1.14">
  class Vec : public vector {
  public:
      Vec(int s) : (s) {}
      Vec(Vec&amp;);
      ~Vec() {}
      void operator=(Vec&amp;);
      void operator*=(Vec&amp;);
      void operator*=(int);
      //...
  };
</a></pre>

<pre><a name="gl1.14">
Обратите внимание  на способ  определения конструктора производного
класса, Vec::Vec(),  когда он  передает свой  параметр конструктору
базового класса  vector::vector() и  больше не  делает ничего.  Это
полезная парадигма.  Операция присваивания  перегружена,  ее  можно
определить так:
</a></pre>

<pre><a name="gl1.14">
  void Vec::operator=(Vec&amp; a)
  {
      int s = size();
      if (s!=a.size()) error(&quot;плохой размер вектора для =&quot;);
      for (int i = 0; i

  void error(char* p) {
      cerr << p << "\n"; exit(1); } void vector::set_size(int) { /*...*/ } int& vec::operator[](int i) { /*...*/ } main() { Vec a(10); Vec b(10); for (int i="0;" i </pre>
</a><a name="1.15">
</a></pre>

<h2 align="center"><a name="1.15">1.15 Друзья (friends) </a></h2>

<p><a name="1.15">Функция operator+() не
воздействует непосредственно на
представление вектора.
Действительно, она не может этого
делать, поскольку не является
членом. Однако иногда желательно
дать функциям не членам
возможность доступа к закрытой
части класса. Например, если бы не
было функции &quot;доступа без
проверки&quot; vector::elem(), вам пришлось
бы проверять индекс i на
соответствие границам три раза за
каждый проход цикла. Здесь мы
избежали этой сложности, но она
довольно типична, поэтому у класса
есть механизм предоставления права
доступа к своей закрытой части
функциям не членам. Просто в
описание класса помещается
описание функции, перед которым
стоит ключевое слово friend. Например,
если имеется </a></p>

<pre><a name="1.15">
  class Vec;  // Vec - имя класса

  class vector {
      friend Vec operator+(Vec, Vec);
      //...
  };
</a></pre>

<pre><a name="1.15">
То вы можете написать
</a></pre>

<pre><a name="1.15">
  Vec operator+(Vec a, Vec b)
  {
      int s = a.size();
      if (s != b.size()) error(&quot;плохой размер вектора для +&quot;);
      Vec&amp; sum = *new Vec(s);
      int* sp = sum.v;
      int* ap = a.v;
      int* bp = b.v;
      while (s--) *sp++ = *ap++ + *bp++;
      return sum;
  }
</a></pre>

<pre><a name="1.15">
Одним из  особенно полезных  аспектов механизма friend является то,
что функция  может быть  другом двух и более классов. Чтобы увидеть
это, рассмотрим  определение vector  и matrix,  а затем определение
функции умножения (см. </a><a
href="ref8.htm#ref8.8">#с.8.8</a>).
<a name="gl1.16">
 </a></pre>

<h2 align="center"><a name="gl1.16">1.16 Обобщенные
Вектора </a></h2>

<p><a name="gl1.16">&quot;Пока все хорошо,&quot; -
можете сказать вы, - &quot;но я хочу,
чтобы один из этих векторов был
типа matrix, который я только что
определил.&quot; К сожалению, в C++ не
предусмотрены средства для
определения класса векторов с
типом элемента в качестве
параметра. Один из способов -
продублировать описание и класса, и
его функций членов. Это не
идеальный способ, но зачастую
вполне приемлемый. <br>
Вы можете воспользоваться
препроцессором (</a><a href="gl4.htm#gl4.7">#4.7</a>),
чтобы механизировать работу.
Например, класс vector - упрощенный
вариант класса, который можно найти
в стандартном заголовочном файле.
Вы могли бы написать: </p>

<pre>
  #include

  declare(vector,int);

  main()
  {
      vector(int) vv(10);
      vv[2] = 3;
      vv[10] = 4; // ошибка: выход за границы
  }
</pre>

<pre>
Файл  vector.h     таким   образом  определяет     макросы,   чтобы
declare(vector,int) после  расширения превращался в описание класса
vector, очень  похожий  на  тот,  который  был  определен  выше,  а
implement(vector,int)  расширялся   в  определение   функций  этого
класса. Поскольку  implement(vector,int)  в  результате  расширения
превращается  в  определение  функций,  его  можно  использовать  в
программе только  один раз,  в то  время как    declare(vector,int)
должно использоваться  по одному  разу в каждом файле, работающем с
этим типом целых векторов.
</pre>

<pre>
  declare(vector,char);
  //...
  implement(vector,char);
</pre>

<pre>
даст  вам   отдельный  тип  &quot;вектор  символов&quot;.  Пример  реализации
обобщенных классов с помощью макросов приведен в <a
href="gl7.htm#gl7.3.5">#7.3.5</a>.
<a name="1.17">
</a></pre>

<h2 align="center"><a name="1.17">1.17 Полиморфные
Вектора </a></h2>

<p><a name="1.17">У вас есть другая
возможность - определить ваш
векторный и другие вмещающие
классы через указатели на объекты
некоторого класса: </a></p>

<pre><a name="1.17">
  class common {
      //...
  };
  class vector {
      common** v;
      //...
  public:
      cvector(int);
      common*&amp; elem(int);
      common*&amp; operator[](int);
      //...
  };
</a></pre>

<pre><a name="1.17">
Заметьте, что  поскольку в  таких векторах хранятся указатели, а не
сами объекты,  объект может  быть  &quot;в&quot;  нескольких  таких  векторах
одновременно.  Это   очень  полезное  свойство  подобных  вмещающих
классов, таких,  как вектора,  связанные списки,  множества и  т.д.
Кроме  того,  можно  присваивать  указатель  на  производный  класс
указателю  на   его  базовый   класс,  поэтому  можно  использовать
приведенный выше  cvector для  хранения указателей  на объекты всех
производных от common классов. Например:
</a></pre>

<pre><a name="1.17">
  class apple : public common { /*...*/ }
  class orange : public common { /*...*/ }
  class apple_vector : public cvector {
  public:

  cvector fruitbowl(100);
  //...
  apple aa;
  orange oo;
  //...
  fruitbowl[0] = &amp;aa
  fruitbowl[1] = &amp;oo
  }
</a></pre>

<pre><a name="1.17">
Однако, точный  тип объекта,  вошедшего в  такой  вмещающий  класс,
больше компилятору  не известен.  Например, в предыдущем примере вы
знаете, что  элемент вектора  является common, но является он apple
или  orange?   Обычно   точный   тип   должен   в последствие   быть
восстановлен, чтобы  обеспечить правильное  использование  объекта.
Для этого  нужно или  в какой-то  форме хранить информацию о типе в
самом объекте,  или обеспечить, чтобы во вмещающий класс помещались
только объекты  данного типа. Последнее легко достигается с помощью
производного  класса.   Вы  можете,   например,  создать     вектор
указателей на apple:
</a></pre>

<pre><a name="1.17">
  class apple_vector : public cvector {
  public:
      apple*&amp; elem(int i)
          { return (apple*&amp;) cvector::elem(i); }
      //...
  };
</a></pre>

<pre><a name="1.17">
используя  запись   приведения  к   типу     (тип)выражение,  чтобы
преобразовать common*&amp;  (ссылку на  указатель на  common),  которую
возвращает cvector::elem,  в apple*&amp;.  Такое применение производных
классов создает альтернативу обобщенным классам. Писать его немного
труднее  (если   не  использовать   макросы  таким  образом,  чтобы
производные классы  фактически реализовывали обобщенные классы; см.
</a><a href="gl7.htm#gl7.3.5">#7.3.5</a>), но  оно имеет  то преимущество, что все производные классы совместно используют  единственную копию функции базового класса. В
случае обобщенных  классов, таких,  как vector(type),  для  каждого
нового   используемого   типа   должна   создаваться   (с   помощью
implement()) новая  копия таких  функций. Другой  способ,  хранение
идентификации  типа   в  каждом   объекте,  приводит  нас  к  стилю
программирования, который  часто  называют  объекто-основанным  или
объектно-ориентированным.
<a name="gl1.18">
</a></pre>

<h2 align="center"><a name="gl1.18">1.18 Виртуальные
функции </a></h2>

<p><a name="gl1.18">Предположим, что мы
пишем программу для изображения
фигур на экране. Общие атрибуты
фигуры представлены классом shape, а
специальные атрибуты -
специальными классами: </a></p>

<pre><a name="gl1.18">
  class shape {
      point center;
      color col;
      //...
  public:
      void move(point to) { center=to; draw(); }
      point where() { return center; }
      virual void draw();
      virtual void rotate(int);
      //...
  };
</a></pre>

<pre><a name="gl1.18">
Функции, которые можно определить не зная точно определенной фигуры
(например, move  и where,  то есть,  &quot;передвинуть&quot; и  &quot;где&quot;), можно
описать как  обычно. Остальные  функции описываются  как virual, то
есть такие,  которые  должны  определяться  в  производном  классе.
Например:
</a></pre>

<pre><a name="gl1.18">
  class circle: public shape {
      int radius;
  public:
      void draw();
      void rotatte(int i) {}
      //...
  };
</a></pre>

<pre><a name="gl1.18">
Теперь, если shape_vec - вектор фигур, то можно написать:
</a></pre>

<pre><a name="gl1.18">
  for (int i = 0; i
</a></pre>

<p><a name="*1.1"><font size="2">*<sup>1</sup>
Программирующим на C << известно как операция сдвига влево для целых. Такое использование << не утеряно; просто в дальнейшем << было определено для случая, когда его левый операнд является потоком вывода. Как это делается, описано в #1.8. (прим. автора) <a name="*1.2"> <br>
*<sup>2</sup> одномерный массив. Это
принятый термин (например, вектора
прерываний), и мы сочли, что
стандартный перевод его как
&quot;массив&quot; затуманит изложение.
(прим. перев.) </font></a><a name="*1.3"><font size="2"><br>
*<sup>3</sup> англ. dereference - получить
значение объекта, на который
указывает данный указатель. (прим.
перев.) </font></a><a name="*1.4"><font size="2"><br>
*<sup>4</sup> в оригинале expression-oriented
(expression - выразительность и
выражение). (прим. перев.) </font></a></p>

<p align="center"><a name="*1.4"><font size="2">[</font></a><a
href="apredis.htm"><font size="2">Назад</font></a><font
size="2">] [</font><a href="aglav.htm"><font size="2">Содержание</font></a><font
size="2">] [</font><a href="gl2.htm"><font size="2">Вперед</font></a><font
size="2">] </font></p>

<p align="center">&nbsp;</p>
</body>
</html>
